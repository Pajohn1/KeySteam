import asyncio
import logging
import aiosqlite
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "7967860347:AAHUs2UBmU-NIqSm3l5vK6_jRl-bW8dL-co"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
BOT_USERNAME = "PajohnKeyBot"
CHANNELS = [
    {"id": "@Gamesgaben", "link": "https://t.me/Gamesgaben"},
    {"id": "@PaJohn66", "link": "https://t.me/PaJohn66"},
]

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async def init_db():
    async with aiosqlite.connect("database.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                referrals INTEGER DEFAULT 0,
                last_key_date TEXT DEFAULT ''
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS referrals (
                user_id INTEGER PRIMARY KEY,
                referrer_id INTEGER
            )
        """)
        await db.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –∏–∑ —Ñ–∞–π–ª–∞ key.txt (–æ–¥–∏–Ω –Ω–∞ —Å—Ç—Ä–æ–∫—É)
async def get_key_from_file():
    try:
        with open("key.txt", "r") as file:
            keys = file.readlines()
        if keys:
            key = keys[0].strip()
            with open("key.txt", "w") as file:
                file.writelines(keys[1:])
            return key
    except FileNotFoundError:
        return None
    return None

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async def register_user(user_id: int, referrer_id: int = None):
    async with aiosqlite.connect("database.db") as db:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
        await db.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π id –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–∞–≤–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        if referrer_id and user_id != referrer_id:
            async with db.execute("SELECT referrer_id FROM referrals WHERE user_id = ?", (user_id,)) as cursor:
                exists = await cursor.fetchone()
            if not exists:
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                await db.execute("INSERT INTO referrals (user_id, referrer_id) VALUES (?, ?)", (user_id, referrer_id))
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                await db.execute("UPDATE users SET referrals = referrals + 1 WHERE user_id = ?", (referrer_id,))
                async with db.execute("SELECT referrals FROM users WHERE user_id = ?", (referrer_id,)) as cursor:
                    row = await cursor.fetchone()
                    count = row[0] if row else 0
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –∫—Ä–∞—Ç–Ω–æ–µ 5 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π ‚Äì –≤—ã—Å—ã–ª–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π –∫–ª—é—á —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                if count % 5 == 0:
                    key = await get_key_from_file()
                    if key:
                        await bot.send_message(referrer_id, f"\U0001F389 –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ 5 –¥—Ä—É–∑–µ–π —Ç–≤–æ–π –±–æ–Ω—É—Å–Ω—ã–π –∫–ª—é—á: {key}")
        await db.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
async def check_subscription(user_id: int) -> bool:
    for channel in CHANNELS:
        chat_member = await bot.get_chat_member(channel["id"], user_id)
        if chat_member.status not in ("member", "administrator", "creator"):
            return False
    return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
@dp.message(CommandStart())
async def start(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split()
    referrer_id = int(args[1]) if len(args) > 1 and args[1].isdigit() else None
    await register_user(user_id, referrer_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")],
        [InlineKeyboardButton(text="üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite_friends")],
        [InlineKeyboardButton(text="üéÆ –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á", callback_data="get_key")],
        [InlineKeyboardButton(text="üìä –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="my_referrals")],
        [InlineKeyboardButton(text="‚è± –¢–∞–π–º–µ—Ä", callback_data="timer")]
    ])
    
    # –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    text = (
        "\U0001F44B –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! –Ø —â–µ–¥—Ä—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–¥–∞–µ—Ç –∫–ª—é—á–∏ –æ—Ç –∏–≥—Ä Steam \U0001F3AE\n\n"
        "‚úÖ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞:\n"
        "1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n"
        "üîπ <a href='https://t.me/Gamesgaben'>Steam Games</a>\n"
        "üîπ <a href='https://t.me/PaJohn66'>PaJohn</a>\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\"."
    )
    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data
    
    if data == "check_sub":
        if await check_subscription(user_id):
            await callback.message.answer("\U0001F389 –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á.")
        else:
            await callback.message.answer("‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
    
    elif data == "invite_friends":
        referral_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
        await callback.message.answer(f"üì© –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: {referral_link}\nüéÅ –ó–∞ –∫–∞–∂–¥—ã—Ö 5 –¥—Ä—É–∑–µ–π ‚Äî –±–æ–Ω—É—Å–Ω—ã–π –∫–ª—é—á!")
    
    elif data == "my_referrals":
        async with aiosqlite.connect("database.db") as db:
            async with db.execute("SELECT referrals, last_key_date FROM users WHERE user_id = ?", (user_id,)) as cursor:
                result = await cursor.fetchone()
                count = result[0] if result else 0
                last_key_date = result[1] if result else None
        remaining = 5 - (count % 5) if (count % 5) != 0 else 0
        response = f"üìä –¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª {count} –¥—Ä—É–∑–µ–π! –î–æ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∫–ª—é—á–∞ –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –¥—Ä—É–∑–µ–π."
        if last_key_date and last_key_date != "":
            try:
                last_dt = datetime.datetime.strptime(last_key_date, "%Y-%m-%d")
                next_dt = last_dt + datetime.timedelta(days=14)
                now = datetime.datetime.now()
                remaining_time = next_dt - now
                days = remaining_time.days
                hours, rem = divmod(remaining_time.seconds, 3600)
                minutes, _ = divmod(rem, 60)
                response += f"\n‚è≥ –¢–∞–π–º–µ—Ä: {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç"
            except Exception as e:
                response += "\n–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞"
        await callback.message.answer(response)
    
    elif data == "get_key":
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if not await check_subscription(user_id):
            await callback.message.answer("‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
            return
        async with aiosqlite.connect("database.db") as db:
            async with db.execute("SELECT last_key_date FROM users WHERE user_id = ?", (user_id,)) as cursor:
                row = await cursor.fetchone()
            last_key_date_str = row[0] if row and row[0] != "" else None
            can_get = False
            if not last_key_date_str:
                can_get = True
            else:
                try:
                    last_dt = datetime.datetime.strptime(last_key_date_str, "%Y-%m-%d")
                    now = datetime.datetime.now()
                    if (now - last_dt).days >= 14:
                        can_get = True
                except Exception as e:
                    can_get = True
            if can_get:
                key = await get_key_from_file()
                if key:
                    today = datetime.datetime.now().strftime("%Y-%m-%d")
                    await db.execute("UPDATE users SET last_key_date = ? WHERE user_id = ?", (today, user_id))
                    await db.commit()
                    await callback.message.answer(f"üîë –¢–≤–æ–π –∫–ª—é—á: {key}")
                else:
                    await callback.message.answer("‚ùå –ö–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
            else:
                await callback.message.answer("‚è≥ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –∫–ª—é—á, –ø–æ–¥–æ–∂–¥–∏ 14 –¥–Ω–µ–π!")
    
    elif data == "timer":
        async with aiosqlite.connect("database.db") as db:
            async with db.execute("SELECT last_key_date FROM users WHERE user_id = ?", (user_id,)) as cursor:
                row = await cursor.fetchone()
        last_key_date_str = row[0] if row and row[0] != "" else None
        if not last_key_date_str:
            await callback.message.answer("–¢–∞–π–º–µ—Ä: 0 –¥–Ω–µ–π, 0 —á–∞—Å–æ–≤, 0 –º–∏–Ω—É—Ç")
        else:
            try:
                last_dt = datetime.datetime.strptime(last_key_date_str, "%Y-%m-%d")
                next_dt = last_dt + datetime.timedelta(days=14)
                now = datetime.datetime.now()
                if next_dt <= now:
                    await callback.message.answer("–¢–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫. –¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á!")
                else:
                    remaining_time = next_dt - now
                    days = remaining_time.days
                    hours, rem = divmod(remaining_time.seconds, 3600)
                    minutes, _ = divmod(rem, 60)
                    await callback.message.answer(f"–¢–∞–π–º–µ—Ä: {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç")
            except Exception as e:
                await callback.message.answer("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞")

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
